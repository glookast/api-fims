apply plugin: "java"
apply plugin: "maven"
apply plugin: "signing"

group = "com.glookast.api"
version = "1.2.0"

sourceCompatibility = 1.7
targetCompatibility = 1.7

jar {
    manifest {
        attributes "Implementation-Version": version
    }
}

repositories {
    mavenCentral()
}

configurations {
    jaxws
    schemas
}

dependencies {
    jaxws "com.sun.xml.ws:jaxws-tools:2.2.10"
    jaxws "org.jvnet.jaxb2_commons:jaxb2-value-constructor:3.0"
    schemas "com.glookast.api:api-fims-schemas:1.2.0"
    runtime "com.glookast.api:api-fims-schemas:1.2.0"
    compile "com.glookast.commons:commons-xml:1.0.0"
}

def generatedSrcDir = file("generated/main/java")
def generatedResourcesDir = file("generated/main/resources")

sourceSets.main.java.srcDirs generatedSrcDir

def captureMediaWsdl = file("generated/main/resources/tv/fims/captureMedia.wsdl")
def captureMediaXjb = file("src/main/bindings/captureMedia.xjb")
def transformMediaWsdl = file("generated/main/resources/tv/fims/transformMedia.wsdl")
def transformMediaXjb = file("src/main/bindings/transformMedia.xjb")
def transferMediaWsdl = file("generated/main/resources/tv/fims/transferMedia.wsdl")
def transferMediaXjb = file("src/main/bindings/transferMedia.xjb")
def capabilitiesWsdl = file("generated/main/resources/com/glookast/api/fims/capabilities.wsdl")
def capabilitiesXjb = file("src/main/bindings/capabilities.xjb")

task extractSchemas(type: Copy) {
    from {
        configurations.schemas.collect { zipTree(it) }
    }
    into generatedResourcesDir
    exclude "META-INF/**"
}

task wsimport  {
    inputs.file captureMediaWsdl
    inputs.file captureMediaXjb
    inputs.file transformMediaWsdl
    inputs.file transformMediaXjb
    inputs.file transferMediaWsdl
    inputs.file transferMediaXjb
    inputs.file capabilitiesWsdl
    inputs.file capabilitiesXjb
    outputs.dir generatedSrcDir
    doLast{
        ant {
            sourceSets.main.output.classesDir.mkdirs()
            generatedSrcDir.mkdirs()
            taskdef(name: "wsimport",
                classname: "com.sun.tools.ws.ant.WsImport",
                classpath: configurations.jaxws.asPath)
            wsimport(keep:true,
                destdir: sourceSets.main.output.classesDir,
                sourcedestdir: generatedSrcDir,
                wsdl: captureMediaWsdl,
                wsdlLocation: "/tv/fims/captureMedia.wsdl",
                binding: captureMediaXjb,
                xnocompile: true) {
                xjcarg(value: "-Xvalue-constructor")
            }
        }
        ant {
            sourceSets.main.output.classesDir.mkdirs()
            generatedSrcDir.mkdirs()
            taskdef(name: "wsimport",
                classname: "com.sun.tools.ws.ant.WsImport",
                classpath: configurations.jaxws.asPath)
            wsimport(keep:true,
                destdir: sourceSets.main.output.classesDir,
                sourcedestdir: generatedSrcDir,
                wsdl: transformMediaWsdl,
                wsdlLocation: "/tv/fims/transformMedia.wsdl",
                binding: transformMediaXjb,
                xnocompile: true) {
                xjcarg(value: "-Xvalue-constructor")
            }
        }
        ant {
            sourceSets.main.output.classesDir.mkdirs()
            generatedSrcDir.mkdirs()
            taskdef(name: "wsimport",
                classname: "com.sun.tools.ws.ant.WsImport",
                classpath: configurations.jaxws.asPath)
            wsimport(keep:true,
                destdir: sourceSets.main.output.classesDir,
                sourcedestdir: generatedSrcDir,
                wsdl: transferMediaWsdl,
                wsdlLocation: "/tv/fims/transferMedia.wsdl",
                binding: transferMediaXjb,
                xnocompile: true) {
                xjcarg(value: "-Xvalue-constructor")
            }
        }
        ant {
            sourceSets.main.output.classesDir.mkdirs()
            generatedSrcDir.mkdirs()
            taskdef(name: "wsimport",
                classname: "com.sun.tools.ws.ant.WsImport",
                classpath: configurations.jaxws.asPath)
            wsimport(keep:true,
                destdir: sourceSets.main.output.classesDir,
                sourcedestdir: generatedSrcDir,
                wsdl: capabilitiesWsdl,
                wsdlLocation: "/com/glookast/api/fims/capabilities.wsdl",
                binding: capabilitiesXjb,
                xnocompile: true) {
                xjcarg(value: "-Xvalue-constructor")
            }
        }
    }
}

wsimport.dependsOn(extractSchemas)

compileJava.dependsOn(wsimport)

clean << {
    if (generatedSrcDir.exists()) {
        generatedSrcDir.listFiles().each { f -> delete f }
    }
    if (generatedResourcesDir.exists()) {
        generatedResourcesDir.listFiles().each { f -> delete f }
    }
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name "api-fims"
                packaging "jar"
                // optionally artifactId can be defined here 
                description "Java implementation of api-fims-schemas"
                url "http://github.com/glookast/api-fims"

                scm {
                    connection "scm:git:git://github.com/glookast/api-fims.git"
                    developerConnection "scm:git:ssh://github.com:glookast/api-fims.git"
                    url "http://github.com/glookast/api-fims/tree/master"
                }

                licenses {
                    license {
                        name "The Apache License, Version 2.0"
                        url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        id "joostrovers"
                        name "Joost Rovers"
                        email "joost.rovers@glookast.com"
                    }
                }
            }
        }
    }
}
